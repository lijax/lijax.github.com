<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lijax</title><link href="http://blog.yeyanbo.com/" rel="alternate"></link><link href="http://blog.yeyanbo.com/feeds/all.atom.xml" rel="self"></link><id>http://blog.yeyanbo.com/</id><updated>2013-08-05T11:10:00+08:00</updated><entry><title>Google Summer of Code 8</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-8.html" rel="alternate"></link><updated>2013-08-05T11:10:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-08-05:posts/google-summer-of-code-8.html</id><summary type="html">&lt;h2&gt;Last Week(7.29-8.4)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed a small bug and improved the code structure of TreeConsruction module.&lt;/li&gt;
&lt;li&gt;Improved documents and tests for TreeConsruction module.&lt;/li&gt;
&lt;li&gt;Submitted mid-term evaluation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;This Week(8.5-8.11)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Write majority-rule consensus method;&lt;/li&gt;
&lt;li&gt;Get clear understanding of adams consensus method and try to implement it.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GSOC"></category><category term="biopython"></category><category term="test"></category><category term="document"></category><category term="midterm"></category></entry><entry><title>Google Summer of Code 7</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-7.html" rel="alternate"></link><updated>2013-07-29T11:10:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-07-29:posts/google-summer-of-code-7.html</id><summary type="html">&lt;h2&gt;Last Week(7.22-7.28)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Implemented a &lt;code&gt;BitString&lt;/code&gt; class with binary manipulation methods in &lt;code&gt;Consensus&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Finished &lt;code&gt;strict_consensus&lt;/code&gt; method using &lt;code&gt;BitString&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wrote a method to import and convert protein substitution matrices from &lt;code&gt;SubsMat.MatrixInfo&lt;/code&gt; to &lt;code&gt;Matrix&lt;/code&gt; of nested list in &lt;code&gt;TreeConstruction&lt;/code&gt; module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;This Week(7.29-8.2)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cleanup existing code, improve tests and document;&lt;/li&gt;
&lt;li&gt;Write and submit mid-term evaluations.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GSOC"></category><category term="biopython"></category><category term="bitstring"></category><category term="strict consensus"></category></entry><entry><title>Google Summer of Code 6</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-6.html" rel="alternate"></link><updated>2013-07-21T11:10:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-07-21:posts/google-summer-of-code-6.html</id><summary type="html">&lt;h2&gt;Last Week(7.15-7.21)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote and tested the ParsimonyScorer class with the combination of Fitch algorithm and Sankoff algorithm;&lt;/li&gt;
&lt;li&gt;Implemented the NNITreeSearcher class for searching the best parsimony tree;&lt;/li&gt;
&lt;li&gt;Restructured all parsimony classes and finished the ParsimonyTreeConstructor class.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;This Week(7.22-7.28)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Write more tests for finished algorithms.&lt;/li&gt;
&lt;li&gt;Write a binary class that will be used for clade storing and counting in the consensus tree searching algorithms.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sample Usage for Parsimony Tree&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AlignIO&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Phylo&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Matrix&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ParsimonyScorer&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NNITreeSearcher&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ParsimonyTreeConstructor&lt;/span&gt;

    &lt;span class="c"&gt;# alignment&lt;/span&gt;
    &lt;span class="n"&gt;aln&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AlignIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;TreeConstruction/msa.phy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;phylip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# start tree&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Phylo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;./TreeConstruction/upgma.tre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;newick&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;#create parsimony scorer from a penalty matrix&lt;/span&gt;
    &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;penalty_matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                      &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step_matrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;scorer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParsimonyScorer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# create tree searcher of Nearest Neighbor Interchange&lt;/span&gt;
    &lt;span class="n"&gt;searcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NNITreeSearcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scorer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# create parsimony tree constructor&lt;/span&gt;
    &lt;span class="n"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParsimonyTreeConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aln&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# build the best parsimony tree&lt;/span&gt;
    &lt;span class="n"&gt;best_tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_tree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="GSOC"></category><category term="biopython"></category><category term="maximum parsimony"></category><category term="consensus tree"></category></entry><entry><title>Google Summer of Code 5</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-5.html" rel="alternate"></link><updated>2013-07-16T08:10:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-07-16:posts/google-summer-of-code-5.html</id><summary type="html">&lt;p&gt;I was working on my future job and a bioinformatics course during last two weeks. So only few things have been finished. While, everything now works as plained, as I finished the NJ algorithm one week ahead of original schedule.&lt;/p&gt;
&lt;h2&gt;Last Two Weeks(7.1-7.14)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Solved all problems about parsimony method with the help of Mark and redesigned all classes for this algorithm;&lt;/li&gt;
&lt;li&gt;Implemented generic ParsimonyScorer accepting a scoring matrix for calculating parsimony score given a tree and an alignment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;This week(7.15-7.21)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Write test for ParsimonyScorer;&lt;/li&gt;
&lt;li&gt;Implement NNI(Nearest Neighbor Interchanges) algorithm.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GSOC"></category><category term="biopython"></category><category term="maximum parsimony"></category></entry><entry><title>Google Summer of Code 4</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-4.html" rel="alternate"></link><updated>2013-07-01T17:20:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-07-01:posts/google-summer-of-code-4.html</id><summary type="html">&lt;h2&gt;Last Week(6.24-6.30)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Implemented the UPGMA and NJ algorithms(&lt;code&gt;DistanceTreeConstructor&lt;/code&gt;) by porting my Java code for those two.&lt;/li&gt;
&lt;li&gt;Added test code in &lt;code&gt;test_TreeConstruction&lt;/code&gt; for both algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;This week(7.1-7.7)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get more clear understanding of the parsimony methods for both DNA and protein sequences.&lt;/li&gt;
&lt;li&gt;Design the parsimony score method and write document and tests for it;&lt;/li&gt;
&lt;li&gt;Implement method to calculate the parsimony score for a given tree and an alignment;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DistanceTreeConstructor Usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AlignIO&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DistanceCaluculator&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DistanceTreeConstructor&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TreeConstruction&lt;/span&gt;
    &lt;span class="n"&gt;aln&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AlignIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;TreeConstruction/msa.phy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;phylip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;calculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DistanceCaluculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aln&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blosum62&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_distance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DistanceTreeConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upgma_tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upgma&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;nj_tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="GSOC"></category><category term="biopython"></category><category term="UPGMA"></category><category term="NJ"></category><category term="parsimony"></category></entry><entry><title>Google Summer of Code 3</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-3.html" rel="alternate"></link><updated>2013-06-24T08:35:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-06-24:posts/google-summer-of-code-3.html</id><summary type="html">&lt;h2&gt;First week summary&lt;/h2&gt;
&lt;p&gt;Last week, I designed the &lt;a href="https://github.com/lijax/biopython/blob/master/Bio/Phylo/TreeConstruction.py"&gt;TreeConstruction&lt;/a&gt; module implemented the &lt;code&gt;DistanceMatrix&lt;/code&gt; and &lt;code&gt;DistanceCalculator&lt;/code&gt; classes, almost the same as planed. From the original &lt;code&gt;DistanceMatrix&lt;/code&gt; plan, I extracted a &lt;code&gt;Matrix&lt;/code&gt; base class so that it can be used for scoring matrices or be extended later.&lt;/p&gt;
&lt;p&gt;Usage demo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AlignIO&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DistanceMatrix&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio.Phylo.TreeConstruction&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DistanceCaluculator&lt;/span&gt;

&lt;span class="c"&gt;# get a multiple alignment&lt;/span&gt;
&lt;span class="n"&gt;alignment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AlignIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;msa.phy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;phylip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# construct a distance calculator from the alignment and the given scoring matrix name(DNA: identity, blastn, trans; Protein: blosum40/62/90, pam90/120/250) &lt;/span&gt;
&lt;span class="n"&gt;calculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DistanceCaluculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# get the distance matrix&lt;/span&gt;
&lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_distance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# print a lower triangular format of the distance matrix&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# get the distance from sequence &amp;#39;Alpha&amp;#39; to &amp;#39;Beta&amp;#39;(the id from the SeqRecord of the MSA object)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Beta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# delete a element from the distance matrix&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# insert a element with the distances at the position 1 &lt;/span&gt;
&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A &lt;a href="https://github.com/lijax/biopython/blob/master/Tests/test_TreeConstruction.py"&gt;unittest&lt;/a&gt; was also written in the Tests directory.&lt;/p&gt;
&lt;p&gt;Hope I can get feedbacks to improve my python coding.&lt;/p&gt;
&lt;h2&gt;Plan for this week&lt;/h2&gt;
&lt;p&gt;Implement the UPGMA and NJ algorithms. This should be easy as I wrote both of them in Java before.&lt;/p&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;One common operation in both algorithms is to delete and insert elements in the DistanceMatrix object. This may cause unexpected error if there are other operations on the original DistanceMatrix object after any of the algorithm. I think one solution is to use the &lt;code&gt;deepcopy&lt;/code&gt; to make another copy of the DistanceMatrix object at the beginning of the algorithm. A little slower.&lt;/p&gt;</summary><category term="GSOC"></category><category term="biopython"></category><category term="distance matrix"></category><category term="distance calculation"></category></entry><entry><title>Google Summer of Code 2</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-2.html" rel="alternate"></link><updated>2013-06-16T09:35:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-06-16:posts/google-summer-of-code-2.html</id><summary type="html">&lt;p&gt;Coding period will begin next Monday. It's time to work. &lt;/p&gt;
&lt;h2&gt;Tree construction module design&lt;/h2&gt;
&lt;p&gt;The first task of this project is to implement a tree construction module providing three basic tree construction algorithms(UPGMA, NJ and MP). I'll name this module TreeConstruction. Classes design are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TreeConstructor&lt;/code&gt;: basic class for all tree constructors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DistanceTreeConstructor&lt;/code&gt;: This class accepts a &lt;code&gt;DistanceMatrix&lt;/code&gt; to create a constructor object and provide two methods, &lt;code&gt;upgma&lt;/code&gt; and &lt;code&gt;nj&lt;/code&gt;, to construct and return a Tree object. Though we can construct the distance tree directly from a &lt;code&gt;MSA&lt;/code&gt;, I think it's better to separate different responsibilities into different classs or methods. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ParsimonyTreeConstructor&lt;/code&gt;: This class accepts a &lt;code&gt;MSA&lt;/code&gt; to create a constructor object and provide a &lt;code&gt;mp&lt;/code&gt; method to construct and return a Tree object. Two assistant methods &lt;code&gt;__parsimony_score&lt;/code&gt; and &lt;code&gt;__nni&lt;/code&gt; will be used to calculate the parsimony score and to do the Nearest Neighbor Interchanges to search the best tree.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DistanceMatrix&lt;/code&gt;: This class accepts a name list and lower triangle matrix to create the object. Some built-in methods &lt;code&gt;__getitem__&lt;/code&gt;, &lt;code&gt;__setitem__&lt;/code&gt;, &lt;code&gt;__delitem__&lt;/code&gt;, &lt;code&gt;__len__&lt;/code&gt; and a &lt;code&gt;insert&lt;/code&gt; method will be implemented to assist distance tree construction.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DistanceCalculator&lt;/code&gt;: This class accepts a &lt;code&gt;MSA&lt;/code&gt; to create the object. Two methods &lt;code&gt;dna_distance&lt;/code&gt; and &lt;code&gt;protein_distance&lt;/code&gt; can be provided to calculate DNA and protein distances respectively and return a &lt;code&gt;DistanceMatrix&lt;/code&gt; object, and two assistant methods &lt;code&gt;dna_pair&lt;/code&gt; and &lt;code&gt;protein_pair&lt;/code&gt; to calculate pairwise distance.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;First week work plan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement the &lt;code&gt;DistanceMatrix&lt;/code&gt; first so that the distance based method can be worked on later. For an object &lt;code&gt;dm&lt;/code&gt; of the &lt;code&gt;DistanceMatrix&lt;/code&gt;, the expected functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dm[1]&lt;/code&gt;, &lt;code&gt;dm['name']&lt;/code&gt;: to get or set the distances related to taxa of the index '1' or the 'name';&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dm[1,2]&lt;/code&gt;, `dm['name1','name2']: to get or set the specified distance;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del dm[1]&lt;/code&gt;, &lt;code&gt;del dm['name']&lt;/code&gt;: to delete one branch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dm.insert('name', distances)&lt;/code&gt;: to insert a taxa with related distances.&lt;/li&gt;
&lt;li&gt;Those functions will be used in UPGMA and NJ algorithms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is enough time, try to implement &lt;code&gt;DistanceCalculator&lt;/code&gt;. The works include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check and identify the &lt;code&gt;Alphabet&lt;/code&gt; of the &lt;code&gt;MSA&lt;/code&gt; (why it's         &lt;code&gt;SingleLetterAlphabet()&lt;/code&gt; no matter what the sequences are?);&lt;/li&gt;
&lt;li&gt;choose and prepare scoring matrices for dna and protein;&lt;/li&gt;
&lt;li&gt;write distance methods for dna and proteins.&lt;/li&gt;
&lt;li&gt;write tests for distance calculation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Problems and Challenges&lt;/h2&gt;
&lt;p&gt;I'm sure the &lt;code&gt;DistanceMatrix&lt;/code&gt; class can be completed this week. So it won't affect the works for the next few weeks.&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;DistanceCalculator&lt;/code&gt;, I estimate it will consume too much time on test design and data preparation.&lt;/p&gt;
&lt;p&gt;One problem is how to identify the alphabet of the &lt;code&gt;MSA&lt;/code&gt; so as to decide which distance method to use. Let the user define?&lt;/p&gt;
&lt;p&gt;Another one is which scoring matrices we should choose. Provide all and let the user select?&lt;/p&gt;
&lt;p&gt;Maybe we can implement or improve the &lt;code&gt;DistanceCalculator&lt;/code&gt; later  if we extent this too much.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Work out the &lt;code&gt;DistanceMatrix&lt;/code&gt; and try the &lt;code&gt;DistanceCalculator&lt;/code&gt;.&lt;/p&gt;</summary><category term="GSOC"></category><category term="biopython"></category><category term="phylo"></category><category term="tree construction"></category><category term="distance matrix"></category></entry><entry><title>Google Summer of Code 1</title><link href="http://blog.yeyanbo.com/posts/google-summer-of-code-1.html" rel="alternate"></link><updated>2013-06-04T21:13:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-06-04:posts/google-summer-of-code-1.html</id><summary type="html">&lt;p&gt;I'm very excited that I'm accepted for this year's &lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013"&gt;Google Summer of Code(GSOC)&lt;/a&gt;. In recent days, I have been busy preparing my master's thesis and defense. This news is like good stress reliever for me. The project I'm going to work on is "&lt;a href="http://informatics.nescent.org/wiki/Phyloinformatics_Summer_of_Code_2013#Phylogenetics_in_Biopython:_Filling_in_the_gaps"&gt;Phylogenetics in Biopython: Filling in the gaps&lt;/a&gt;", which is to implement some phylogenetics algorithms for &lt;a href="http://biopython.org/wiki/Main_Page"&gt;Biopython&lt;/a&gt;. I believe it will be an exciting coding experience.&lt;/p&gt;
&lt;h2&gt;Get to Know GSOC&lt;/h2&gt;
&lt;p&gt;The first time I got to know the GSOC was from &lt;a href="http://www.biojava.org"&gt;Biojava&lt;/a&gt; homepage when I was trying to use Biojava for my own bioinformatics work. As I thought most of the applicants and biojava contributors might be from the computer background, I never had the courage to apply this. Last September, I got the chance to know Professor Allen and Karen when they were visiting our lab. And Karen told us more details about the GSOC and also the &lt;a href="http://www.nescent.org/"&gt;NESCent&lt;/a&gt;, and that they had been the mentoring organization for several years. I must say this finally inspired me to apply the GSOC this year.&lt;/p&gt;
&lt;h2&gt;Application&lt;/h2&gt;
&lt;p&gt;The application is certainly through the &lt;a href="http://informatics.nescent.org/wiki/Phyloinformatics_Summer_of_Code_2013"&gt;Phyloinformatics Summer of Code&lt;/a&gt; from NESCent. I originally wanted to apply the project of "Discovering links to ToLWeb content from a tree in the Open Tree of Life's software system". This project is based on several existing Java projects and also need some knowledge of HTML, XML, Javascript and Python. As my first programming language is Java and I know other related languages and techniques, this project is good for me. After the Biopython projects being added in, I found the current project was more suitable for me. Because most of the algorithms in this project are implemented in &lt;a href="https://github.com/bigwiv/BlastGraph"&gt;BlastGraph&lt;/a&gt;, a software I wrote in Java. I'm very familiar with those algorithms. Also, the former project has another applicant, while this one did not have any. As the project can only have one student and every student can only work on one project, maybe it's better to avoid the competition so that everyone can have a higher chance to be selected. Another major reason to choose this project is that I want to improve my python programming skill, which I use far less than Java before.&lt;/p&gt;
&lt;h2&gt;Project Description&lt;/h2&gt;
&lt;p&gt;As the name implies, this project is to implement some phylogenetic algorithms that are currently absent in the Biopython.Phylo package. In this package, some basic phylogenetics functions, such as tree operations, parsers for Newick, Nexus and PhyloXML, and wrappers for Phyml, Raxml and PAML, are already implemented. While there are some important components that remain to be filled in to better support phylogenetic workflows. These include simple tree construction algorithms, consensus tree searching, tree comparison and visualization. In this project, I will focus on the first two functions: tree construction and consensus tree searching. The tree construction part includes three algorithms: &lt;a href="http://en.wikipedia.org/wiki/UPGMA"&gt;UPGMA&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Neighbor-joining"&gt;Neighbor Joining&lt;/a&gt;, and &lt;a href="http://en.wikipedia.org/wiki/Maximum_parsimony_(phylogenetics)"&gt;Maximum Parsimony&lt;/a&gt;. And the consensus tree part includes another three: Strict, Majority-rule and Adams Consensus. So after this project, there will be two separate modules providing those algorithms in Biopython.Phylo package.&lt;/p&gt;
&lt;h2&gt;Works for the Next Two Weeks&lt;/h2&gt;
&lt;p&gt;The coding time will start on June 17. So during the next two weeks, I will read related source code in Biopython and trying to design two draft modules for both two parts.&lt;/p&gt;</summary><category term="necent"></category><category term="GSOC"></category></entry><entry><title>Switch to Pelican</title><link href="http://blog.yeyanbo.com/posts/switch-to-pelican.html" rel="alternate"></link><updated>2013-06-01T21:00:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-06-01:posts/switch-to-pelican.html</id><summary type="html">&lt;p&gt;As I need to post my working progress for the Google Summer of Code project, this github blog is a good place to share this information. My project is a Biopython project. Before start the real coding, it's better to play with some existing python code. So yesterday, I changed the blog generating system from &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; to &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;. Octopress is based on Ruby and is widely used by github bloggers. But, as I know little about Ruby, it is complicated and hard to use for me. Pelican is pure Python. It really get much more easier. Actually I think Pelican is more easy to install and use than Octopress even for those who know little about both languages. The comment system--DISQUS has not been setup yet, as I forget my DISQUS account. Will fix it later.&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>Tools I used for markdown writing</title><link href="http://blog.yeyanbo.com/posts/tools-i-used-for-markdown-writing.html" rel="alternate"></link><updated>2013-03-03T21:13:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-03-03:posts/tools-i-used-for-markdown-writing.html</id><summary type="html">&lt;h2&gt;Editors&lt;/h2&gt;
&lt;h3&gt;Sublime Text and plugins on Linux&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.sublimetext.com/" title="Sublime Text"&gt;Sublime Text&lt;/a&gt; is an awesome text editor supporting almost all programming languages. It also support Windows and Mac including Linux. Some useful functions users love are &lt;em&gt;Goto Anything&lt;/em&gt;, &lt;em&gt;Multiple Selections&lt;/em&gt;, &lt;em&gt;Command Palette&lt;/em&gt; and &lt;em&gt;Split Editing&lt;/em&gt;, etc. While the most fantastic feature is its easy and elegant &lt;a href="http://www.sublimetext.com/docs/2/api_reference.html" title="plugin API"&gt;plugin system&lt;/a&gt; using JSON and python language and its open source &lt;a href="http://wbond.net/sublime_packages/community" title="Sublime Text Plugin Community"&gt;plugin community&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So it can support markdown with highlight and there are some plugins make markdown writing much easier.&lt;/p&gt;
&lt;p&gt;List of markdown plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/revolunet/sublimetext-markdown-preview" title="Markdown Preview"&gt;Markdown Preview&lt;/a&gt;: preview in browser.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ogom.github.com/sublimetext-markdown-slideshow" title="Markdown Slideshow"&gt;Markdown Slideshow&lt;/a&gt;: markdown slideshow to Html5 slideshow.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://johnmacfarlane.net/pandoc/" title="Pandoc"&gt;Pandoc&lt;/a&gt;: Pandoc integration in Sublime.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phyllisstein/Pandown" title="Pandown"&gt;Pandown&lt;/a&gt;: Another Pandoc integration with more output support.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/larlequin/PandocAcademic" title="Pandoc Academic"&gt;Pandoc Academic&lt;/a&gt;: Another Pandoc integration with bibliography support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Editors on other platforms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows: &lt;a href="http://markdownpad.com/" title="MarkdownPad"&gt;MarkdownPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome: &lt;a href="https://chrome.google.com/webstore/detail/made/oknndfeeopgpibecfjljjfanledpbkog" title="MaDe Editor for markdown"&gt;MaDe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Android: &lt;a href="https://play.google.com/store/apps/details?id=com.jamesmc.writer" title="Writer"&gt;Writer&lt;/a&gt; with Dropbox syncing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pandoc&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://johnmacfarlane.net/pandoc/" title="Pandoc"&gt;Pandoc&lt;/a&gt; is a general markup converter. It can convert from one markup format to another and to DOCX, PDF, EPUB document. The blow network shows the supported markup formats and conversions. Pandoc allow you to write document in markdown and release it to any other format.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PandocFormat" src="http://johnmacfarlane.net/pandoc/diagram.png" title="Pandoc Format" /&gt;&lt;/p&gt;
&lt;!-- links --&gt;

&lt;!-- images --&gt;</summary><category term="programing"></category><category term="markdown"></category><category term="Pandoc"></category><category term="Sublime Text"></category></entry><entry><title>First Blog</title><link href="http://blog.yeyanbo.com/posts/first-blog.html" rel="alternate"></link><updated>2013-03-02T17:30:00+08:00</updated><author><name>Yanbo Ye</name></author><id>tag:blog.yeyanbo.com,2013-03-02:posts/first-blog.html</id><summary type="html">&lt;h2&gt;Start&lt;/h2&gt;
&lt;p&gt;The first github blog post. Just a simple test.&lt;/p&gt;
&lt;h2&gt;Installed octopress&lt;/h2&gt;
&lt;p&gt;Installed octopress this afternoon. I thought it was a real dynamic blogging or CMS system just like wordpress. While I was wrong. But I must admit it's the perfect blogging system for programmers on github.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;I'm not a ruby coder and I don't care about how it works. Just want use it to help me get familiar with github and markdown. &lt;/p&gt;
&lt;p&gt;So let's start blogging on github with markdown. &lt;/p&gt;
&lt;h2&gt;Test&lt;/h2&gt;
&lt;h3&gt;Emphasize&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;emphasize&lt;/em&gt; &lt;strong&gt;test&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;List&lt;/h3&gt;
&lt;p&gt;This is a list test.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list1&lt;/li&gt;
&lt;li&gt;list2&lt;/li&gt;
&lt;li&gt;list3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Code block test&lt;/h3&gt;
&lt;p&gt;{% include_code sample.py sample.py %}&lt;/p&gt;
&lt;h2&gt;Works?&lt;/h2&gt;
&lt;p&gt;Enough. It works?&lt;/p&gt;</summary><category term="octopress"></category></entry></feed>